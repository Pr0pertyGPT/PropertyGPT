-- These are included in each scenario

Macro Successfully
    Invariant Success

Macro AllowFailures
    ClearInvariants Success

Macro PricedComptroller closeFactor=0.1 maxAssets=20
    Unitroller Deploy
    PriceOracle Deploy Simple
    ComptrollerImpl Deploy Scenario ScenComptroller
    Unitroller SetPendingImpl ScenComptroller
    PriceOracleProxy Deploy (Unitroller Address) (PriceOracle Address) (Address Zero) -- Final argument is a Junk address, if listing cEther use ListedEtherToken to replace proxy
    ComptrollerImpl ScenComptroller Become (PriceOracleProxy Address) closeFactor maxAssets

Macro NewComptroller price=1.0 closeFactor=0.1 maxAssets=20
    Unitroller Deploy
    PriceOracle Deploy Fixed price
    ComptrollerImpl Deploy Scenario ScenComptroller
    Unitroller SetPendingImpl ScenComptroller
    PriceOracleProxy Deploy (Unitroller Address) (PriceOracle Address) (Address Zero) -- Junk address, if listing cEther use ListedEtherToken to replace proxy
    ComptrollerImpl ScenComptroller Become (PriceOracleProxy Address) closeFactor maxAssets

Macro NewCToken erc20 cToken borrowRate=0.0005 initialExchangeRate=2e9 decimals=8 tokenType=Standard cTokenType=Scenario
    Erc20 Deploy tokenType erc20 erc20
    InterestRateModel Deploy Fixed StdInterest borrowRate -- Note: interest rate model probably shouldn't be global
    CToken Deploy cTokenType cToken cToken (Erc20 erc20 Address) (Comptroller Address) (InterestRateModel StdInterest Address) initialExchangeRate decimals

Macro NewEtherToken cToken borrowRate=0.0005 initialExchangeRate=2e9 decimals=8
    InterestRateModel Deploy Fixed StdInterest borrowRate -- Note: interest rate model probably shouldn't be global
    CToken Deploy CEtherScenario cToken cToken (Comptroller Address) (InterestRateModel StdInterest Address) initialExchangeRate decimals

Macro ListedCToken erc20 cToken borrowRate=0.0005 initialExchangeRate=2e9 decimals=8 tokenType=Standard cTokenType=Scenario
    NewCToken erc20 cToken borrowRate initialExchangeRate decimals tokenType cTokenType
    Comptroller SupportMarket cToken

Macro ListedEtherToken cToken borrowRate=0.0005 initialExchangeRate=2e9 decimals=8
    NewEtherToken cToken borrowRate initialExchangeRate decimals
    Comptroller SupportMarket cToken
    PriceOracleProxy Deploy (Unitroller Address) (PriceOracle Address) (Address cETH)
    Comptroller SetPriceOracle (PriceOracleProxy Address)

Macro ListedEtherTokenMinted cToken borrowRate=0.0005 initialExchangeRate=2e9 decimals=8
    NewEtherToken cToken borrowRate initialExchangeRate decimals
    Comptroller SupportMarket cToken
    CallMintEth Root 1e18 cToken

Macro SetPriceCF cToken price collateralFactor
    PriceOracle SetPrice cToken price
    Comptroller SetCollateralFactor cToken collateralFactor

Macro Give user amount erc20
    Erc20 erc20 Faucet user amount

Macro Donate token amount
    (Trx Value amount (CToken token Donate))

Macro Prep user amount erc20 token allowanceAmount=Nothing
    Erc20 erc20 Faucet user amount
    From user (Erc20 erc20 Approve token (Default allowanceAmount amount))

Macro Allow user token
    From user (Erc20 (CToken token Underlying) Approve token Max)

Macro AccrueInterest token
    CToken token AccrueInterest

Macro Mint user amount token
    From user (CToken token Mint amount)

Macro SendMintEth user amount token
    From user (Trx GasPrice 0 (Trx Value amount (Send token amount)))

Macro CallMintEth user amount token
    From user (Trx GasPrice 0 (Trx Value amount (CToken token Mint)))

Macro Redeem user amount token
    From user (CToken token Redeem amount)

Macro RedeemEth user amount token
    Trx GasPrice 0 (From user (CToken token Redeem amount))

Macro RedeemUnderlying user amount token
    From user (CToken token RedeemUnderlying amount)

Macro RedeemUnderlyingEth user amount token
    Trx GasPrice 0 (From user (CToken token RedeemUnderlying amount))

Macro BorrowEth user amount token
    Trx GasPrice 0 (From user (CToken token Borrow amount))

Macro Borrow user amount token
    From user (CToken token Borrow amount)

Macro RepayBorrow user amount token
    From user (CToken token RepayBorrow amount)

Macro RepayBorrowEth user amount token
    From user (Trx GasPrice 0 (Trx Value amount (CToken token RepayBorrow)))

Macro RepayBorrowEthMax user amount token
    From user (Trx GasPrice 0 (Trx Value amount (Maximillion RepayBehalf user)))

Macro RepayBorrowBehalf user behalf amount token
    From user (CToken token RepayBorrowBehalf behalf amount)

Macro RepayBorrowEthBehalf user behalf amount token
    From user (Trx GasPrice 0 (Trx Value amount (CToken token RepayBorrowBehalf behalf)))

Macro Liquidate liquidator _ borrower amount token _ collateral
    From liquidator (CToken token Liquidate borrower collateral amount)

Macro LiquidateEthColl liquidator _ borrower amount token _ collateral
    From liquidator (Trx GasPrice 0 (CToken token Liquidate borrower collateral amount))

Macro LiquidateEthBorrow liquidator _ borrower amount token _ collateral
    From liquidator (Trx GasPrice 0 (Trx Value amount (CToken token Liquidate borrower collateral)))

Macro Seize amount token caller liquidator borrower
    From caller (CToken token Seize liquidator borrower amount)

Macro EvilSeize token amount treasure seizer seizee
    CToken token EvilSeize treasure seizer seizee amount

Macro Support cToken collateralFactor=0.5
    Comptroller SupportMarket cToken
    Comptroller SetCollateralFactor cToken collateralFactor

Macro SetCollateralFactor cToken collateralFactor=0.5
    Comptroller SetCollateralFactor cToken collateralFactor

Macro ReduceReserves amount token
    CToken token ReduceReserves amount

Macro FastForward n blocks
    Comptroller FastForward n blocks

Macro EnterMarkets user ...markets
    From user (Comptroller EnterMarkets markets)

Macro ExitMarket user market
    From user (Comptroller ExitMarket market)

Macro Transfer from to amount token
    From from (Erc20 token Transfer to amount)

Macro Cash cToken
    Read Erc20 (CToken cToken Underlying) TokenBalance cToken

Macro QuickMint amount cToken from=Me
    Give from amount (CToken cToken Underlying)
    Allow from cToken
    From from (CToken cToken Mint amount)

Macro QuickBorrow amount cToken ...collateral
    From Me (Comptroller EnterMarkets collateral)
    From Me (Comptroller EnterMarkets (cToken))
    From Me (CToken cToken Borrow amount)

-- Macro for performing a borrow with the sole
-- purpose of adding interest to the erc20 market
Macro BorrowAndRepayWithInterest erc20 cToken amount interestAmount interestRate blocks reserveRate=0
    -- TODO: Make invariant success for these?
    -- TODO: Named args as macros
    InterestRateModel Deploy Fixed Std interestRate
    CToken cToken SetInterestRateModel (InterestRateModel Std Address)
    CToken cToken SetReserveFactor reserveRate
    ListedCToken COLLAT cCOLLAT
    Comptroller SetCollateralFactor cCOLLAT 0.9
    Prep Torrey 1e30 COLLAT cCOLLAT
    Mint Torrey 1e30 cCOLLAT
    EnterMarkets Torrey cCOLLAT cToken
    Assert True (Comptroller CheckMembership Torrey cCOLLAT)
    Assert True (Comptroller CheckMembership Torrey cToken)
    Borrow Torrey amount cToken
    -- Cool, we've borrowed, now let's accrue interest then repay all
    FastForward blocks Blocks
    -- RepayBorrow Torrey (CToken BorrowBalance Torrey) cToken
    From Torrey (Erc20 erc20 Approve cToken amount)
    RepayBorrow Torrey amount cToken
    From Torrey (Erc20 erc20 Approve cToken interestAmount)
    Give Torrey interestAmount erc20
    RepayBorrow Torrey interestAmount cToken
    Assert Equal (CToken cToken BorrowBalance Torrey) Zero
