
Macro NewBorrow borrowAmount borrowRate user=Geoff collateralPrice=1.0 borrowPrice=1.0 mintAmount=100e18 collateralTokenType=Standard borrowTokenType=Standard
    PricedComptroller
    Comptroller LiquidationIncentive 1.1
    NewCToken ZRX cZRX 0.0005 2e9 8 collateralTokenType
    NewCToken BAT cBAT borrowRate 2e9 8 borrowTokenType -- note: cannot use macros with named args right now
    Give cBAT 10e18 BAT -- Faucet some bat to borrow
    PriceOracle SetPrice cZRX collateralPrice
    Support cZRX collateralFactor:0.5
    PriceOracle SetPrice cBAT borrowPrice
    Support cBAT collateralFactor:0
    SimpleBorrow user borrowAmount mintAmount

Macro SimpleBorrow user borrowAmount mintAmount
    Prep user mintAmount ZRX cZRX
    Mint user mintAmount cZRX
    EnterMarkets user cZRX cBAT
    Borrow user borrowAmount cBAT

Test "Insufficient shortfall"
    NewBorrow borrowAmount:1e18 borrowRate:0.0005
    Assert Equal (CToken cBAT BorrowBalance Geoff) 1e18
    Assert Equal (CToken cBAT TotalBorrows) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance cBAT) 9e18
    -- Prices is 1:1 and collateral factor is 0.5
    -- thus supplies 100e18 cZRX which gives the user 50e18
    -- capacity of BAT. User only borrowed 1BAT, but after
    -- a few blocks at a 50% interest rate, he'll be
    -- underwater.
    FastForward 98000 Blocks -- 1e18 * (1 + 98000 * 0.0005)
    AccrueInterest cBAT -- Note: we have to accrue interest
                        -- since it's not automatic for liquidity
    Assert Equal (CToken cBAT BorrowBalanceStored Geoff) 50e18
    Assert Equal (CToken cBAT TotalBorrows) 50e18
    -- Check user liquidity and verify equals 0
    Assert Equal (Comptroller Liquidity Geoff) 0e18
    -- At exactly zero, should not be able to liquidate
    Prep Torrey 10e18 BAT cBAT
    AllowFailures
    Liquidate Torrey "->" Geoff 10e18 cBAT "Seizing" cZRX
    Assert Failure COMPTROLLER_REJECTION LIQUIDATE_COMPTROLLER_REJECTION INSUFFICIENT_SHORTFALL

Test "Cannot self-liquidate"
    NewBorrow borrowAmount:1e18 borrowRate:0.0005
    Assert Equal (CToken cBAT BorrowBalance Geoff) 1e18
    Assert Equal (CToken cBAT TotalBorrows) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance cBAT) 9e18
    -- Prices is 1:1 and collateral factor is 0.5
    -- thus supplies 100e18 cZRX which gives the user 50e18
    -- capacity of BAT. User only borrowed 1BAT, but after
    -- a few blocks at a 50% interest rate, he'll be
    -- underwater.
    FastForward 100000 Blocks -- 1e18 * (1 + 100000 * 0.0005)
    AccrueInterest cBAT -- Note: we have to accrue interest
                        -- since it's not automatic for liquidity
    Assert Equal (CToken cBAT BorrowBalanceStored Geoff) 51e18
    Assert Equal (CToken cBAT TotalBorrows) 51e18
    -- Check user liquidity and verify < 0
    Assert Equal (Comptroller Liquidity Geoff) -1e18
    -- Okay, so we should be able to liquidate, so let's do that.
    Prep Geoff 10e18 BAT cBAT
    AllowFailures
    Liquidate Geoff "->" Geoff 2e18 cBAT "Seizing" cZRX
    Assert Failure INVALID_ACCOUNT_PAIR LIQUIDATE_LIQUIDATOR_IS_BORROWER

Test "Liqidate beyond max close"
    NewBorrow borrowAmount:1e18 borrowRate:0.0005
    Assert Equal (CToken cBAT BorrowBalance Geoff) 1e18
    Assert Equal (CToken cBAT TotalBorrows) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance cBAT) 9e18
    -- Prices is 1:1 and collateral factor is 0.5
    -- thus supplies 100e18 cZRX which gives the user 50e18
    -- capacity of BAT. User only borrowed 1BAT, but after
    -- a few blocks at a 50% interest rate, he'll be
    -- underwater.
    FastForward 100000 Blocks -- 1e18 * (1 + 100000 * 0.0005)
    AccrueInterest cBAT -- Note: we have to accrue interest
                        -- since it's not automatic for liquidity
    Assert Equal (CToken cBAT BorrowBalanceStored Geoff) 51e18
    Assert Equal (CToken cBAT TotalBorrows) 51e18
    -- Check user liquidity and verify < 0
    Assert Equal (Comptroller Liquidity Geoff) -1e18
    -- Okay, so we should be able to liquidate, so let's do that.
    Prep Torrey 10e18 BAT cBAT
    AllowFailures
    Liquidate Torrey "->" Geoff 10e18 cBAT "Seizing" cZRX
    Assert Failure COMPTROLLER_REJECTION LIQUIDATE_COMPTROLLER_REJECTION TOO_MUCH_REPAY

Test "Proper liquidation with 1:1 price ratio"
    NewBorrow borrowAmount:1e18 borrowRate:0.0005
    Assert Equal (CToken cBAT BorrowBalance Geoff) 1e18
    Assert Equal (CToken cBAT TotalBorrows) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance cBAT) 9e18
    -- Prices are 1:1 and collateral factor is 0.5
    -- thus supplies 100e18 cZRX which gives the user 50e18
    -- capacity of BAT. User only borrowed 1BAT, but after
    -- a lot of blocks at a 0.05% interest rate, he'll be
    -- underwater.
    FastForward 100000 Blocks -- 1e18 * (1 + 100000 * 0.0005)
    AccrueInterest cBAT -- Note: we have to accrue interest
                        -- since it's not automatic for liquidity
    Assert Equal (CToken cBAT BorrowBalanceStored Geoff) 51e18
    Assert Equal (CToken cBAT TotalBorrows) 51e18
    -- Check user liquidity and verify < 0
    Assert Equal (Comptroller Liquidity Geoff) -1e18 -- recheck
    -- Okay, so we should be able to liquidate, so let's do that.
    Prep Torrey 2e18 BAT cBAT
    --
    -- Let's check how values start before liqudation
    -- Note: we're going to be some-what exhausive in what we check
    Invariant Remains (Erc20 ZRX TokenBalance Geoff) 0e18 -- all was minted
    Invariant Remains (Erc20 ZRX TokenBalance Torrey) 0e18 -- didn't have any beforehand
    Invariant Remains (Erc20 ZRX TokenBalance cZRX) 100e18 -- from minting
    Assert Equal (Erc20 cZRX TokenBalance Geoff) 50e9 -- from minting
    Assert Equal (Erc20 cZRX TokenBalance Torrey) 0e9 -- never had any
    Invariant Remains (Erc20 BAT TokenBalance Geoff) 1e18 -- original amount borrowed
    Assert Equal (Erc20 BAT TokenBalance Torrey) 2e18 -- from prep above
    Assert Equal (Erc20 BAT TokenBalance cBAT) 9e18 -- had 10e18, lent 1e18 to geoff
    Invariant Remains (Erc20 cBAT TokenBalance Geoff) 0e9 -- never had any (has underlying)
    Invariant Remains (Erc20 cBAT TokenBalance Torrey) 0e9 -- never had any
    Assert Equal (CToken cBAT BorrowBalanceStored Geoff) 51e18 -- all that interest
    Assert Equal (CToken cBAT TotalBorrows) 51e18 -- all those borrowers
    -- Do the liquidation
    Liquidate Torrey "->" Geoff 2e18 cBAT "Seizing" cZRX
    --
    -- And see what they are now
    Assert Equal (Erc20 cZRX TokenBalance Geoff) 48.9e9 -- 1:1 -> 2e18 x 1.1 รท 2e19 [exchange rate] = 1.1e9 -> Torrey
    Assert Equal (Erc20 cZRX TokenBalance Torrey) 1.1e9 -- never had any
    Assert Equal (Erc20 BAT TokenBalance Torrey) 0e18 -- repaid
    Assert Equal (Erc20 BAT TokenBalance cBAT) 11e18 -- had 10e18, lent 1e18 to geoff, repaid 2
    Assert Equal (CToken cBAT BorrowBalanceStored Geoff) 49e18 -- less closed amount
    Assert Equal (CToken cBAT TotalBorrows) 49e18 --
    -- Prices are 1:1 and collateral factor is 0.5
    -- User now has 48.9 outstanding supply (yielding 48.9e18 borrowing capacity)
    -- The user also has a 49e18 borrow outstanding.
    -- Thus the liquidity is (48.9-49)e18 or -0.1e18.
    Assert Equal (Comptroller Liquidity Geoff) -0.1e18

Test "Proper liquidation with 2:1 price ratio"
    NewBorrow borrowAmount:1e18 borrowRate:0.0005 borrowPrice:2.0
    Assert Equal (CToken cBAT BorrowBalance Geoff) 1e18
    Assert Equal (CToken cBAT TotalBorrows) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance cBAT) 9e18
    -- Prices are 2:1 and collateral factor is 0.5
    -- thus supplies 100e18 cZRX which gives the user 50e18
    -- capacity of BAT. User only borrowed 1BAT, but after
    -- a lot blocks at a 0.05% interest rate, he'll be
    -- underwater.
    FastForward 100000 Blocks -- 1e18 * (1 + 100000 * 0.0005)
    AccrueInterest cBAT -- Note: we have to accrue interest
                        -- since it's not automatic for liquidity
    Assert Equal (CToken cBAT BorrowBalanceStored Geoff) 51e18
    Assert Equal (CToken cBAT TotalBorrows) 51e18
    -- Check user liquidity and verify < 0
    Assert Equal (Comptroller Liquidity Geoff) -52e18 -- ( ( 1.0 * 100e18 * 0.5 ) - ( 2.0 * 51e18 ) ) / 1e18
    -- Okay, so we should be able to liquidate, so let's do that.
    Prep Torrey 2e18 BAT cBAT
    --
    -- Let's check how values start before liqudation
    -- Note: we're going to be some-what exhausive in what we check
    Invariant Remains (Erc20 ZRX TokenBalance Geoff) 0e18 -- all was minted
    Invariant Remains (Erc20 ZRX TokenBalance Torrey) 0e18 -- never had any
    Invariant Remains (Erc20 ZRX TokenBalance cZRX) 100e18 -- from minting
    Assert Equal (Erc20 cZRX TokenBalance Geoff) 50e9 -- from minting
    Assert Equal (Erc20 cZRX TokenBalance Torrey) 0e9 -- never had any
    Invariant Remains (Erc20 BAT TokenBalance Geoff) 1e18 -- original amount borrowed
    Assert Equal (Erc20 BAT TokenBalance Torrey) 2e18 -- from prep above
    Assert Equal (Erc20 BAT TokenBalance cBAT) 9e18 -- had 10e18, lent 1e18 to geoff
    Invariant Remains (Erc20 cBAT TokenBalance Geoff) 0e9 -- never had any (has underlying)
    Invariant Remains (Erc20 cBAT TokenBalance Torrey) 0e9 -- never had any
    Assert Equal (CToken cBAT BorrowBalanceStored Geoff) 51e18 -- all that interest
    Assert Equal (CToken cBAT TotalBorrows) 51e18 -- all those borrowers
    -- Do the liquidation
    Liquidate Torrey "->" Geoff 2e18 cBAT "Seizing" cZRX -- should now take twice as much collateral
    --
    -- And see what they are now
    Assert Equal (Erc20 cZRX TokenBalance Geoff) 47.8e9 -- 2:1 -> 2 x 2e18 x 1.1 รท 2e19 [exchange rate] = 2.2e9 -> Torrey
    Assert Equal (Erc20 cZRX TokenBalance Torrey) 2.2e9 -- didn't have any beforehand
    Assert Equal (Erc20 BAT TokenBalance Torrey) 0e18 -- repaid
    Assert Equal (Erc20 BAT TokenBalance cBAT) 11e18 -- had 10e18, lent 1e18 to geoff, repaid 2
    Assert Equal (CToken cBAT BorrowBalanceStored Geoff) 49e18 -- less closed amount
    Assert Equal (CToken cBAT TotalBorrows) 49e18 --
    -- Prices are 2:1 and collateral factor is 0.5
    -- User now has 47.8 outstanding supply (yielding 48.9e18 borrowing capacity due
    -- to the offsetting collateral factor and exchange rates).
    -- The user also has a 49e18 borrow outstanding which is weighted 2:1.
    -- Thus the liquidity is (47.8-(2*49))e18 or -50.2e18.
    Assert Equal (Comptroller Liquidity Geoff) -50.2e18

Test "Liquidate exactly zero"
    NewBorrow borrowAmount:1e18 borrowRate:0.0005
    Assert Equal (CToken cBAT BorrowBalance Geoff) 1e18
    Assert Equal (CToken cBAT TotalBorrows) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance cBAT) 9e18
    -- Prices is 1:1 and collateral factor is 0.5
    -- thus supplies 100e18 cZRX which gives the user 50e18
    -- capacity of BAT. User only borrowed 1BAT, but after
    -- a few blocks at a 50% interest rate, he'll be
    -- underwater.
    FastForward 100000 Blocks -- 1e18 * (1 + 100000 * 0.0005)
    AccrueInterest cBAT -- Note: we have to accrue interest
                        -- since it's not automatic for liquidity
    Invariant Remains (CToken cBAT BorrowBalanceStored Geoff) 51e18
    Invariant Remains (CToken cBAT TotalBorrows) 51e18
    -- Check user liquidity and verify < 0
    Invariant Remains (Comptroller Liquidity Geoff) -1e18
    -- Okay, so we should be able to liquidate, so let's do that.
    Prep Torrey 10e18 BAT cBAT
    AllowFailures
    Liquidate Torrey "->" Geoff 0e18 cBAT "Seizing" cZRX
    Assert Failure INVALID_CLOSE_AMOUNT_REQUESTED LIQUIDATE_CLOSE_AMOUNT_IS_ZERO

Test "When price oracle for collateral token is zero"
    NewBorrow borrowAmount:1e18 borrowRate:0.0005
    Assert Equal (CToken cBAT BorrowBalance Geoff) 1e18
    Assert Equal (CToken cBAT TotalBorrows) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance cBAT) 9e18
    -- Prices is 1:1 and collateral factor is 0.5
    -- thus supplies 100e18 cZRX which gives the user 50e18
    -- capacity of BAT. User only borrowed 1BAT, but after
    -- a few blocks at a 50% interest rate, he'll be
    -- underwater.
    FastForward 100000 Blocks -- 1e18 * (1 + 100000 * 0.0005)
    AccrueInterest cBAT -- Note: we have to accrue interest
                        -- since it's not automatic for liquidity
    Invariant Remains (CToken cBAT BorrowBalanceStored Geoff) 51e18
    Invariant Remains (CToken cBAT TotalBorrows) 51e18
    -- Check user liquidity and verify < 0
    Assert Equal (Comptroller Liquidity Geoff) -1e18
    -- Okay, so we should be able to liquidate, so let's do that.
    Prep Torrey 10e18 BAT cBAT
    PriceOracle SetPrice cZRX 0
    AllowFailures
    Liquidate Torrey "->" Geoff 2e18 cBAT "Seizing" cZRX
    Assert Failure COMPTROLLER_REJECTION LIQUIDATE_COMPTROLLER_REJECTION PRICE_ERROR

Test "When price oracle for collateral token is whack"
    NewBorrow borrowAmount:1e18 borrowRate:0.0005
    Assert Equal (CToken cBAT BorrowBalance Geoff) 1e18
    Assert Equal (CToken cBAT TotalBorrows) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance cBAT) 9e18
    -- Prices is 1:1 and collateral factor is 0.5
    -- thus supplies 100e18 cZRX which gives the user 50e18
    -- capacity of BAT. User only borrowed 1BAT, but after
    -- a few blocks at a 50% interest rate, he'll be
    -- underwater.
    FastForward 100000 Blocks -- 1e18 * (1 + 100000 * 0.0005)
    AccrueInterest cBAT -- Note: we have to accrue interest
                        -- since it's not automatic for liquidity
    Invariant Remains (CToken cBAT BorrowBalanceStored Geoff) 51e18
    Invariant Remains (CToken cBAT TotalBorrows) 51e18
    -- Check user liquidity and verify < 0
    Assert Equal (Comptroller Liquidity Geoff) -1e18
    -- Okay, so we should be able to liquidate, so let's do that.
    Prep Torrey 10e18 BAT cBAT
    PriceOracle SetPrice cZRX Max
    AllowFailures
    Liquidate Torrey "->" Geoff 2e18 cBAT "Seizing" cZRX
    Assert Failure COMPTROLLER_REJECTION LIQUIDATE_COMPTROLLER_REJECTION MATH_ERROR

Test "When price oracle for borrow token is zero"
    NewBorrow borrowAmount:1e18 borrowRate:0.0005
    Assert Equal (CToken cBAT BorrowBalance Geoff) 1e18
    Assert Equal (CToken cBAT TotalBorrows) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance cBAT) 9e18
    -- Prices is 1:1 and collateral factor is 0.5
    -- thus supplies 100e18 cZRX which gives the user 50e18
    -- capacity of BAT. User only borrowed 1BAT, but after
    -- a few blocks at a 50% interest rate, he'll be
    -- underwater.
    FastForward 100000 Blocks -- 1e18 * (1 + 100000 * 0.0005)
    AccrueInterest cBAT -- Note: we have to accrue interest
                        -- since it's not automatic for liquidity
    Invariant Remains (CToken cBAT BorrowBalanceStored Geoff) 51e18
    Invariant Remains (CToken cBAT TotalBorrows) 51e18
    -- Check user liquidity and verify < 0
    Assert Equal (Comptroller Liquidity Geoff) -1e18
    -- Okay, so we should be able to liquidate, so let's do that.
    Prep Torrey 10e18 BAT cBAT
    PriceOracle SetPrice cBAT 0
    AllowFailures
    Liquidate Torrey "->" Geoff 2e18 cBAT "Seizing" cZRX
    Assert Failure COMPTROLLER_REJECTION LIQUIDATE_COMPTROLLER_REJECTION PRICE_ERROR

Test "When price oracle for borrow token is whack"
    NewBorrow borrowAmount:1e18 borrowRate:0.0005
    Assert Equal (CToken cBAT BorrowBalance Geoff) 1e18
    Assert Equal (CToken cBAT TotalBorrows) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance cBAT) 9e18
    -- Prices is 1:1 and collateral factor is 0.5
    -- thus supplies 100e18 cZRX which gives the user 50e18
    -- capacity of BAT. User only borrowed 1BAT, but after
    -- a few blocks at a 50% interest rate, he'll be
    -- underwater.
    FastForward 100000 Blocks -- 1e18 * (1 + 100000 * 0.0005)
    AccrueInterest cBAT -- Note: we have to accrue interest
                        -- since it's not automatic for liquidity
    Invariant Remains (CToken cBAT BorrowBalanceStored Geoff) 51e18
    Invariant Remains (CToken cBAT TotalBorrows) 51e18
    -- Check user liquidity and verify < 0
    Assert Equal (Comptroller Liquidity Geoff) -1e18
    -- Okay, so we should be able to liquidate, so let's do that.
    Prep Torrey 10e18 BAT cBAT
    PriceOracle SetPrice cBAT Max
    AllowFailures
    Liquidate Torrey "->" Geoff 2e18 cBAT "Seizing" cZRX
    Assert Failure COMPTROLLER_REJECTION LIQUIDATE_COMPTROLLER_REJECTION MATH_ERROR

Test "When repay borrow fails"
    NewBorrow borrowAmount:1e18 borrowRate:0.0005
    Assert Equal (CToken cBAT BorrowBalance Geoff) 1e18
    Assert Equal (CToken cBAT TotalBorrows) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance cBAT) 9e18
    -- Prices is 1:1 and collateral factor is 0.5
    -- thus supplies 100e18 cZRX which gives the user 50e18
    -- capacity of BAT. User only borrowed 1BAT, but after
    -- a few blocks at a 50% interest rate, he'll be
    -- underwater.
    FastForward 100000 Blocks -- 1e18 * (1 + 100000 * 0.0005)
    AccrueInterest cBAT -- Note: we have to accrue interest
                        -- since it's not automatic for liquidity
    Invariant Remains (CToken cBAT BorrowBalanceStored Geoff) 51e18
    Invariant Remains (CToken cBAT TotalBorrows) 51e18
    -- Check user liquidity and verify < 0
    Invariant Remains (Comptroller Liquidity Geoff) -1e18
    -- Okay, so we should be able to liquidate, so let's do that.
    Prep Torrey 10e18 BAT cBAT allowanceAmount:0.1e18
    AllowFailures
    Liquidate Torrey "->" Geoff 2e18 cBAT "Seizing" cZRX
    Assert Failure TOKEN_INSUFFICIENT_ALLOWANCE REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE


Test "Proper liquidation of paused WBTC as collateral"
    NewBorrow borrowAmount:1e18 borrowRate:0.0005 collateralTokenType:WBTC
    Assert Equal (CToken cBAT BorrowBalance Geoff) 1e18
    Assert Equal (CToken cBAT TotalBorrows) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance cBAT) 9e18
    -- Prices are 1:1 and collateral factor is 0.5
    -- thus supplies 100e18 cZRX which gives the user 50e18
    -- capacity of BAT. User only borrowed 1BAT, but after
    -- a lot of blocks at a 0.05% interest rate, he'll be
    -- underwater.
    FastForward 100000 Blocks -- 1e18 * (1 + 100000 * 0.0005)
    AccrueInterest cBAT -- Note: we have to accrue interest
                        -- since it's not automatic for liquidity
    Assert Equal (CToken cBAT BorrowBalanceStored Geoff) 51e18
    Assert Equal (CToken cBAT TotalBorrows) 51e18
    -- Check user liquidity and verify < 0
    Assert Equal (Comptroller Liquidity Geoff) -1e18 -- recheck
    -- Okay, so we should be able to liquidate, so let's do that.
    Prep Torrey 2e18 BAT cBAT
    --
    -- Let's check how values start before liqudation
    -- Note: we're going to be some-what exhausive in what we check
    Invariant Remains (Erc20 ZRX TokenBalance Geoff) 0e18 -- all was minted
    Invariant Remains (Erc20 ZRX TokenBalance Torrey) 0e18 -- didn't have any beforehand
    Invariant Remains (Erc20 ZRX TokenBalance cZRX) 100e18 -- from minting
    Assert Equal (Erc20 cZRX TokenBalance Geoff) 50e9 -- from minting
    Assert Equal (Erc20 cZRX TokenBalance Torrey) 0e9 -- never had any
    Invariant Remains (Erc20 BAT TokenBalance Geoff) 1e18 -- original amount borrowed
    Assert Equal (Erc20 BAT TokenBalance Torrey) 2e18 -- from prep above
    Assert Equal (Erc20 BAT TokenBalance cBAT) 9e18 -- had 10e18, lent 1e18 to geoff
    Invariant Remains (Erc20 cBAT TokenBalance Geoff) 0e9 -- never had any (has underlying)
    Invariant Remains (Erc20 cBAT TokenBalance Torrey) 0e9 -- never had any
    Assert Equal (CToken cBAT BorrowBalanceStored Geoff) 51e18 -- all that interest
    Assert Equal (CToken cBAT TotalBorrows) 51e18 -- all those borrowers
    -- Pause "WBTC"
    Erc20 ZRX Pause -- Actually a WBTC token
    -- Do the liquidation
    Liquidate Torrey "->" Geoff 2e18 cBAT "Seizing" cZRX
    --
    -- And see what they are now
    Assert Equal (Erc20 cZRX TokenBalance Geoff) 48.9e9 -- 1:1 -> 2e18 x 1.1 รท 2e19 [exchange rate] = 1.1e9 -> Torrey
    Assert Equal (Erc20 cZRX TokenBalance Torrey) 1.1e9 -- never had any
    Assert Equal (Erc20 BAT TokenBalance Torrey) 0e18 -- repaid
    Assert Equal (Erc20 BAT TokenBalance cBAT) 11e18 -- had 10e18, lent 1e18 to geoff, repaid 2
    Assert Equal (CToken cBAT BorrowBalanceStored Geoff) 49e18 -- less closed amount
    Assert Equal (CToken cBAT TotalBorrows) 49e18 --
    -- Prices are 1:1 and collateral factor is 0.5
    -- User now has 48.9 outstanding supply (yielding 48.9e18 borrowing capacity)
    -- The user also has a 49e18 borrow outstanding.
    -- Thus the liquidity is (48.9-49)e18 or -0.1e18.
    Assert Equal (Comptroller Liquidity Geoff) -0.1e18


Test "When WBTC token as borrowed is paused, cannot liquidate"
    NewBorrow borrowAmount:1e18 borrowRate:0.0005 borrowTokenType:WBTC
    Assert Equal (CToken cBAT BorrowBalance Geoff) 1e18
    Assert Equal (CToken cBAT TotalBorrows) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance cBAT) 9e18
    -- Prices is 1:1 and collateral factor is 0.5
    -- thus supplies 100e18 cZRX which gives the user 50e18
    -- capacity of BAT. User only borrowed 1BAT, but after
    -- a few blocks at a 50% interest rate, he'll be
    -- underwater.
    FastForward 100000 Blocks -- 1e18 * (1 + 100000 * 0.0005)
    AccrueInterest cBAT -- Note: we have to accrue interest
                        -- since it's not automatic for liquidity
    Invariant Remains (CToken cBAT BorrowBalanceStored Geoff) 51e18
    Invariant Remains (CToken cBAT TotalBorrows) 51e18
    -- Check user liquidity and verify < 0
    Invariant Remains (Comptroller Liquidity Geoff) -1e18
    -- Okay, so we should be able to liquidate, so let's do that.
    Prep Torrey 10e18 BAT cBAT
    AllowFailures
    Erc20 BAT Pause -- Actually a WBTC token
    Liquidate Torrey "->" Geoff 2e18 cBAT "Seizing" cZRX
    Assert Revert


Test "When seize not allowed due to unlisted collateral"
    NewBorrow borrowAmount:1e18 borrowRate:0.0005
    Assert Equal (CToken cBAT BorrowBalance Geoff) 1e18
    Assert Equal (CToken cBAT TotalBorrows) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance cBAT) 9e18
    -- Prices is 1:1 and collateral factor is 0.5
    -- thus supplies 100e18 cZRX which gives the user 50e18
    -- capacity of BAT. User only borrowed 1BAT, but after
    -- a few blocks at a 50% interest rate, he'll be
    -- underwater.
    FastForward 100000 Blocks -- 1e18 * (1 + 100000 * 0.0005)
    AccrueInterest cBAT -- Note: we have to accrue interest
                        -- since it's not automatic for liquidity
    Invariant Remains (CToken cBAT BorrowBalanceStored Geoff) 51e18
    Invariant Remains (CToken cBAT TotalBorrows) 51e18
    -- Okay, so we should be able to liquidate, so let's do that.
    Prep Torrey 10e18 BAT cBAT
    Comptroller UnList cZRX -- Mock unlist collateral
    AllowFailures
    Liquidate Torrey "->" Geoff 2e18 cBAT "Seizing" cZRX
    Assert Failure COMPTROLLER_REJECTION LIQUIDATE_COMPTROLLER_REJECTION MARKET_NOT_LISTED

Test "When seize not allowed due to unlisted borrow"
    NewBorrow borrowAmount:1e18 borrowRate:0.0005
    Assert Equal (CToken cBAT BorrowBalance Geoff) 1e18
    Assert Equal (CToken cBAT TotalBorrows) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance cBAT) 9e18
    -- Prices is 1:1 and collateral factor is 0.5
    -- thus supplies 100e18 cZRX which gives the user 50e18
    -- capacity of BAT. User only borrowed 1BAT, but after
    -- a few blocks at a 50% interest rate, he'll be
    -- underwater.
    FastForward 100000 Blocks -- 1e18 * (1 + 100000 * 0.0005)
    AccrueInterest cBAT -- Note: we have to accrue interest
                        -- since it's not automatic for liquidity
    Invariant Remains (CToken cBAT BorrowBalanceStored Geoff) 51e18
    Invariant Remains (CToken cBAT TotalBorrows) 51e18
    -- Okay, so we should be able to liquidate, so let's do that.
    Prep Torrey 10e18 BAT cBAT
    Comptroller UnList cBAT -- Mock unlist borrow
    AllowFailures
    Liquidate Torrey "->" Geoff 2e18 cBAT "Seizing" cZRX
    Assert Failure COMPTROLLER_REJECTION LIQUIDATE_COMPTROLLER_REJECTION MARKET_NOT_LISTED

Test "When seize not allowed due to mismatched comptrollers"
    NewBorrow borrowAmount:1e18 borrowRate:0.0005
    Assert Equal (CToken cBAT BorrowBalance Geoff) 1e18
    Assert Equal (CToken cBAT TotalBorrows) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance cBAT) 9e18
    -- Prices is 1:1 and collateral factor is 0.5
    -- thus supplies 100e18 cZRX which gives the user 50e18
    -- capacity of BAT. User only borrowed 1BAT, but after
    -- a few blocks at a 50% interest rate, he'll be
    -- underwater.
    FastForward 100000 Blocks -- 1e18 * (1 + 100000 * 0.0005)
    AccrueInterest cBAT -- Note: we have to accrue interest
                        -- since it's not automatic for liquidity
    Invariant Remains (CToken cBAT BorrowBalanceStored Geoff) 51e18
    Invariant Remains (CToken cBAT TotalBorrows) 51e18
    -- Okay, so we should be able to liquidate, so let's do that.
    Prep Torrey 10e18 BAT cBAT
    -- Change the comptroller of cZRX
    NewComptroller
    From Root (CToken cZRX SetComptroller (Unitroller Address))
    FastForward 100000 Blocks -- To match other comptroller
    --
    AllowFailures
    Liquidate Torrey "->" Geoff 2e18 cBAT "Seizing" cZRX
    Assert Revert "revert token seizure failed"

Test "When there's insufficient collateral"
    NewBorrow borrowAmount:1e18 borrowRate:0.0005 borrowPrice:0.001 mintAmount:1e18
    Assert Equal (CToken cBAT BorrowBalance Geoff) 1e18
    Assert Equal (CToken cBAT TotalBorrows) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance cBAT) 9e18
    -- Prices is 1:1 and collateral factor is 0.5
    -- thus supplies 100e18 cZRX which gives the user 50e18
    -- capacity of BAT. User only borrowed 1BAT, but after
    -- a few blocks at a 50% interest rate, he'll be
    -- underwater.
    FastForward 100000 Blocks -- 1e18 * (1 + 100000 * 0.0005)
    AccrueInterest cBAT -- Note: we have to accrue interest
                        -- since it's not automatic for liquidity
    Invariant Remains (CToken cBAT BorrowBalanceStored Geoff) 51e18
    Invariant Remains (CToken cBAT TotalBorrows) 51e18
    PriceOracle SetPrice cBAT 1.0 -- move price back to 1.0, which will put the account *very underwater*
    -- Check user liquidity and verify < 0
    Invariant Remains (Comptroller Liquidity Geoff) -50.5e18
    -- Okay, so we should be able to liquidate, so let's do that.
    Prep Torrey 10e18 BAT cBAT
    AllowFailures
    Liquidate Torrey "->" Geoff 2e18 cBAT "Seizing" cZRX
    Assert Failure TOKEN_INSUFFICIENT_BALANCE LIQUIDATE_SEIZE_TOO_MUCH
