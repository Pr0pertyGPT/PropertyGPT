methods {
/*70a08231:*/ balanceOf(address) 			returns uint256
/*95dd9193:*/ borrowBalanceStored(address)  returns uint256
/*aa5af0fd:*/ borrowIndex()                 returns uint256
/*f8f9da28:*/ borrowRatePerBlock()          returns uint256
/*5fe3b567:*/ comptroller()                 returns address
/*182df0f5:*/ exchangeRateStored()          returns uint256
/*c37f68e2:*/ getAccountSnapshot(address)   returns uint256,uint256,uint256,uint256
/*3b1d21a2:*/ getCash()                     returns uint256
/*675d972c:*/ initialExchangeRateMantissa() returns uint256
/*f3fdb15a:*/ interestRateModel()           returns address
/*fe9c44ae:*/ isCToken()                    returns bool
/*26782247:*/ pendingAdmin()                returns address
/*173b9904:*/ reserveFactorMantissa()       returns uint256
/*ae9d70b0:*/ supplyRatePerBlock()          returns uint256
/*47bd3718:*/ totalBorrows()                returns uint256
/*8f840ddd:*/ totalReserves()               returns uint256
/*18160ddd:*/ totalSupply()                 returns uint256


// all other methods
/*e9c714f2:*/ _acceptAdmin()
/*601a0bf1:*/ _reduceReserves(uint256)
/*4576b5db:*/ _setComptroller(address)
/*f2b3abbd:*/ _setInterestRateModel(address)
/*b71d1a0c:*/ _setPendingAdmin(address)
/*fca7820b:*/ _setReserveFactor(uint256)
/*6c540baf:*/ accrualBlockNumber()
/*a6afed95:*/ accrueInterest()
/*f851a440:*/ admin()
/*dd62ed3e:*/ allowance(address,address)
/*095ea7b3:*/ approve(address,uint256)
/*3af9e669:*/ balanceOfUnderlying(address)
/*c5ebeaec:*/ borrow(uint256)
/*17bfdfbc:*/ borrowBalanceCurrent(address)
/*0bc1d628:*/ borrowFreshPub(address,uint256)
/*5d2b2256:*/ cTokenMintComputation(uint256)
/*f1651460:*/ cTokenRedeemComputation(uint256)
/*b8b8b26b:*/ checkTransferInPub(address,uint256)
/*d9d9e5e5:*/ comptrollerMintAllowed(address,address,uint256)
/*92ac96fa:*/ comptrollerRedeemAllowed(address,address,uint256)
/*313ce567:*/ decimals()
/*19ec23ba:*/ doTransferInPub(address,uint256)
/*f782def5:*/ doTransferInPubSim(address,uint256)
/*b5d229bb:*/ doTransferOutPub(address,uint256)
/*18628ce7:*/ doTransferOutPubSim(address,uint256)
/*bd6d894d:*/ exchangeRateCurrent()
/*934213e8:*/ exchangeRateStoredInternalPub()
/*f414bbaf:*/ getCashOf(address)
/*5b1c10f6:*/ getCashPub()
/*529ca4b7:*/ interestRateModelGetBorrowRate()
/*f5e3c462:*/ liquidateBorrow(address,uint256,address)
/*a0712d68:*/ mint(uint256)
/*c9645990:*/ mintFreshPub(address,uint256)
/*06fdde03:*/ name()
/*db006a75:*/ redeem(uint256)
/*8c1a1b80:*/ redeemFreshPub(address,uint256,uint256)
/*852a12e3:*/ redeemUnderlying(uint256)
/*0e752702:*/ repayBorrow(uint256)
/*2608f818:*/ repayBorrowBehalf(address,uint256)
/*7a6a0162:*/ repayBorrowFreshPub(address,address,uint256)
/*b2a02ff1:*/ seize(address,address,uint256)
/*95d89b41:*/ symbol()
/*73acee98:*/ totalBorrowsCurrent()
/*a9059cbb:*/ transfer(address,uint256)
/*23b872dd:*/ transferFrom(address,address,uint256)
/*6f307dc3:*/ underlying()
}

frame_balanceOf(address a, method f)
description "$f may change value of balanceOf($a)"
{
	env e0; havoc e0;
	env e1; havoc e1;
	env e2; havoc e2;
	static_require e1.block.number >= e0.block.number;
	static_require e2.block.number >= e1.block.number;

	uint256 old = sinvoke balanceOf(e0, a);
	calldataarg arg;
	invoke f(e1, arg);
	uint256 new = sinvoke balanceOf(e2, a);

	static_assert old == new;
}

frame_borrowBalanceStored(address a, method f)
description "$f may change value of borrowBalanceStored($a)"
{
	env e0; havoc e0;
	env e1; havoc e1;
	env e2; havoc e2;
	static_require e1.block.number >= e0.block.number;
	static_require e2.block.number >= e1.block.number;

	uint256 old = sinvoke borrowBalanceStored(e0, a);
	calldataarg arg;
	invoke f(e1, arg);
	uint256 new = sinvoke borrowBalanceStored(e2, a);

	static_assert old == new;
}

frame_borrowIndex(method f)
description "$f may change value of borrowIndex()"
{
	env e0; havoc e0;
	env e1; havoc e1;
	env e2; havoc e2;
	static_require e1.block.number >= e0.block.number;
	static_require e2.block.number >= e1.block.number;

	uint256 old = sinvoke borrowIndex(e0);
	calldataarg arg;
	invoke f(e1, arg);
	uint256 new = sinvoke borrowIndex(e2);

	static_assert old == new;
}

frame_borrowRatePerBlock(method f)
description "$f may change value of borrowRatePerBlock()"
{
	env e0; havoc e0;
	env e1; havoc e1;
	env e2; havoc e2;
	static_require e1.block.number >= e0.block.number;
	static_require e2.block.number >= e1.block.number;

	uint256 old = sinvoke borrowRatePerBlock(e0);
	calldataarg arg;
	invoke f(e1, arg);
	uint256 new = sinvoke borrowRatePerBlock(e2);

	static_assert old == new;
}

frame_comptroller(method f)
description "$f may change value of comptroller()"
{
	env e0; havoc e0;
	env e1; havoc e1;
	env e2; havoc e2;
	static_require e1.block.number >= e0.block.number;
	static_require e2.block.number >= e1.block.number;

	address old = sinvoke comptroller(e0);
	calldataarg arg;
	invoke f(e1, arg);
	address new = sinvoke comptroller(e2);

	static_assert old == new;
}

frame_exchangeRateStored(address a, method f)
description "$f may change value of exchangeRateStored()"
{
	env e0; havoc e0;
	env e1; havoc e1;
	env e2; havoc e2;
	static_require e1.block.number >= e0.block.number;
	static_require e2.block.number >= e1.block.number;

	uint256 old = sinvoke exchangeRateStored(e0);
	calldataarg arg;
	invoke f(e1, arg);
	uint256 new = sinvoke exchangeRateStored(e2);

	static_assert old == new;
}

frame_getAccountSnapshot(address a, method f)
description "$f may change value of getAccountSnapshot($a)"
{
	env e0; havoc e0;
	env e1; havoc e1;
	env e2; havoc e2;
	static_require e1.block.number >= e0.block.number;
	static_require e2.block.number >= e1.block.number;

	uint256 old1; uint256 old2; uint256 old3; uint256 old4;
	old1,old2,old3,old4 = sinvoke getAccountSnapshot(e0, a);
	calldataarg arg;
	invoke f(e1, arg);
	uint256 new1; uint256 new2; uint256 new3; uint256 new4;
	new1,new2,new3,new4 = sinvoke getAccountSnapshot(e2, a);

	static_assert old1 == new1 && old2 == new2 && old3 == new3 && old4 == new4;
}

frame_getCash(method f)
description "$f may change value of getCash()"
{
	env e0; havoc e0;
	env e1; havoc e1;
	env e2; havoc e2;
	static_require e1.block.number >= e0.block.number;
	static_require e2.block.number >= e1.block.number;

	uint256 old = sinvoke getCash(e0);
	calldataarg arg;
	invoke f(e1, arg);
	uint256 new = sinvoke getCash(e2);

	static_assert old == new;
}

frame_initialExchangeRateMantissa(method f)
description "$f may change value of initialExchangeRateMantissa()"
{
	env e0; havoc e0;
	env e1; havoc e1;
	env e2; havoc e2;
	static_require e1.block.number >= e0.block.number;
	static_require e2.block.number >= e1.block.number;

	uint256 old = sinvoke initialExchangeRateMantissa(e0);
	calldataarg arg;
	invoke f(e1, arg);
	uint256 new = sinvoke initialExchangeRateMantissa(e2);

	static_assert old == new;
}

frame_interestRateModel(method f)
description "$f may change value of interestRateModel()"
{
	env e0; havoc e0;
	env e1; havoc e1;
	env e2; havoc e2;
	static_require e1.block.number >= e0.block.number;
	static_require e2.block.number >= e1.block.number;

	address old = sinvoke interestRateModel(e0);
	calldataarg arg;
	invoke f(e1, arg);
	address new = sinvoke interestRateModel(e2);

	static_assert old == new;
}

frame_isCToken(method f)
description "$f may change value of isCToken()"
{
	env e0; havoc e0;
	env e1; havoc e1;
	env e2; havoc e2;
	static_require e1.block.number >= e0.block.number;
	static_require e2.block.number >= e1.block.number;

	bool old = sinvoke isCToken(e0);
	calldataarg arg;
	invoke f(e1, arg);
	bool new = sinvoke isCToken(e2);

	static_assert old == new;
}

frame_pendingAdmin(method f)
description "$f may change value of pendingAdmin()"
{
	env e0; havoc e0;
	env e1; havoc e1;
	env e2; havoc e2;
	static_require e1.block.number >= e0.block.number;
	static_require e2.block.number >= e1.block.number;

	address old = sinvoke pendingAdmin(e0);
	calldataarg arg;
	invoke f(e1, arg);
	address new = sinvoke pendingAdmin(e2);

	static_assert old == new;
}

frame_reserveFactorMantissa(method f)
description "$f may change value of reserveFactorMantissa()"
{
	env e0; havoc e0;
	env e1; havoc e1;
	env e2; havoc e2;
	static_require e1.block.number >= e0.block.number;
	static_require e2.block.number >= e1.block.number;

	uint256 old = sinvoke reserveFactorMantissa(e0);
	calldataarg arg;
	invoke f(e1, arg);
	uint256 new = sinvoke reserveFactorMantissa(e2);

	static_assert old == new;
}

frame_supplyRatePerBlock(method f)
description "$f may change value of supplyRatePerBlock()"
{
	env e0; havoc e0;
	env e1; havoc e1;
	env e2; havoc e2;
	static_require e1.block.number >= e0.block.number;
	static_require e2.block.number >= e1.block.number;

	uint256 old = sinvoke supplyRatePerBlock(e0);
	calldataarg arg;
	invoke f(e1, arg);
	uint256 new = sinvoke supplyRatePerBlock(e2);

	static_assert old == new;
}

frame_totalBorrows(method f)
description "$f may change value of totalBorrows()"
{
	env e0; havoc e0;
	env e1; havoc e1;
	env e2; havoc e2;
	static_require e1.block.number >= e0.block.number;
	static_require e2.block.number >= e1.block.number;

	uint256 old = sinvoke totalBorrows(e0);
	calldataarg arg;
	invoke f(e1, arg);
	uint256 new = sinvoke totalBorrows(e2);

	static_assert old == new;
}

frame_totalReserves(address a, method f)
description "$f may change value of totalReserves()"
{
	env e0; havoc e0;
	env e1; havoc e1;
	env e2; havoc e2;
	static_require e1.block.number >= e0.block.number;
	static_require e2.block.number >= e1.block.number;

	uint256 old = sinvoke totalReserves(e0);
	calldataarg arg;
	invoke f(e1, arg);
	uint256 new = sinvoke totalReserves(e2);

	static_assert old == new;
}

frame_totalSupply(method f)
description "$f may change value of totalSupply()"
{
	env e0; havoc e0;
	env e1; havoc e1;
	env e2; havoc e2;
	static_require e1.block.number >= e0.block.number;
	static_require e2.block.number >= e1.block.number;

	uint256 old = sinvoke totalSupply(e0);
	calldataarg arg;
	invoke f(e1, arg);
	uint256 new = sinvoke totalSupply(e2);

	static_assert old == new;
}