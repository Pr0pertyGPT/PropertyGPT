methods {
	admin() returns address
	totalSupply() returns uint256
	balanceOf(address) returns uint256
	accrualBlockNumber() returns uint256
	initialExchangeRateMantissa() returns uint256
	totalBorrows() returns uint256
	totalReserves() returns uint256

	// Exposing internal functions
        mintFreshPub(address,uint256) returns uint256
        redeemFreshPub(address,uint256,uint256) returns uint256

        exchangeRateStoredInternalPub() returns uint256, uint256
        checkTransferInPub(address,uint256) returns uint256
        doTransferInPub(address,uint256) returns uint256
        getCash() returns uint256
	comptrollerMintAllowed(address,address,uint256) returns uint256
	comptrollerRedeemAllowed(address,address,uint256) returns uint256

	// Simulation of functions that have effects on external contracts
	doTransferInPubSim(address,uint256) returns uint256
	doTransferOutPubSim(address,uint256) returns uint256

	// Lemmas
	cTokenMintComputation(uint256) returns uint256
	cTokenRedeemComputation(uint256) returns uint256
}

mintFresh(uint result, address account, uint256 amount)
description "Failed to mint fresh asset with result $result (minter account=$account, amount=$amount)" {

	// Free Variables
	env e0; havoc e0; // pre
	env e1; havoc e1; // invocation
	env e1b; havoc e1b; // invocations on behalf of CToken
	env e2; havoc e2; // post

	// Strict ordering
	static_require e1.block.number >= e0.block.number;
	static_require e2.block.number >= e1.block.number;

	// Capture current values
	uint256 totalSupplyPre = sinvoke totalSupply(e0);
	uint256 accountSupplyPre = sinvoke balanceOf(e0, account);
	uint256 marketBlockNumber = sinvoke accrualBlockNumber(e0);

	// Simulate checks that depend on external contracts
	uint comptrollerCheckResult = sinvoke comptrollerMintAllowed(e1, currentContract,account,amount);
	uint labelCheckTransferIn = sinvoke checkTransferInPub(e1b, account, amount);
	uint labelDoTransferIn = sinvoke doTransferInPubSim(e1, account, amount); // SG: make sure doTransferInPubSim and doTransferIn return the same value when starting from the same state, and make sure dummy can simulate all observable external behaviors of the call.

	// Invoke mintFresh
	static_require result == invoke mintFreshPub(e1, account, amount);
	bool mintFreshReverted = lastReverted;

	// Get next values
	uint256 totalSupplyPost = sinvoke totalSupply(e2);
	uint256 accountSupplyPost = sinvoke balanceOf(e2, account);

	// Helper for checking balance has not changed
	bool staticBalance =
		( totalSupplyPost == totalSupplyPre &&
		  accountSupplyPost == accountSupplyPre );

	// Helper for checking balance has not changed, as expected.
	// Precise change is computed in cTokenComputationLemma
	bool dynamicBalance = (totalSupplyPost - totalSupplyPre == accountSupplyPost - accountSupplyPre) // Change in totalSupply is same as change in accountSupply
						&& (totalSupplyPost - totalSupplyPre >= 0); // The change in supplies must be >= 0

	bool comptrollerCheckSuccess = comptrollerCheckResult == 0;
	bool accrued = marketBlockNumber == e1.block.number;
	bool checkTransferSuccess = labelCheckTransferIn == 0;
	bool doTransferSuccess = labelDoTransferIn == 0;

	// Track error codes
	uint256 NO_ERROR = 0;
	uint256 COMPTROLLER_REJECTION = 3;
	uint256 NOT_ACCRUED = 10;
	uint256 CHECK_TRANSFER_FAILED_1 = 12;
	uint256 CHECK_TRANSFER_FAILED_2 = 13;
	uint256 TOKEN_TRANSFER_IN_FAILED = 15;
	uint256 MATH_ERROR = 9;

	// Guarantee return values
	static_assert (!mintFreshReverted && result != MATH_ERROR) => (
	  result == NO_ERROR ||
	  result == COMPTROLLER_REJECTION ||
	  result == NOT_ACCRUED ||
	  result == CHECK_TRANSFER_FAILED_1 ||
	  result == CHECK_TRANSFER_FAILED_2 ||
	  result == TOKEN_TRANSFER_IN_FAILED ||
	  result == MATH_ERROR
	), "Got unexpected error code $result";

	/* All these cases depend on: (1) mintFresh not reverting; and (2) the error code being anything  other than a math error.
		The idea is that (1) reverts, if are not catched by the caller (could it be a contract by Compound?), will have no effect on the state;
		and (2) math errors, which are handled separately.
	 */
	// Success case updates market accordingly
	static_assert (!mintFreshReverted && result != MATH_ERROR) => (result == NO_ERROR <=> (
		comptrollerCheckSuccess &&
		accrued &&
		checkTransferSuccess &&
		doTransferSuccess &&
		dynamicBalance
	)), "Mismatch in no error case (0). Got result $result";

	// Policy hook rejected case
	static_assert (!mintFreshReverted && result != MATH_ERROR) => (result == COMPTROLLER_REJECTION <=> (
		!comptrollerCheckSuccess &&
		staticBalance
	)), "Mismatch in comptroller rejection case (3). Got result $result";

	// Not accrued
	static_assert (!mintFreshReverted && result != MATH_ERROR) => (result == NOT_ACCRUED <=> (
		comptrollerCheckSuccess &&
		!accrued &&
		staticBalance
	)), "Mismatch in non-accrued case (10=0xa). Got result $result";

	// Check transfer failure
	static_assert (!mintFreshReverted && result != MATH_ERROR) => ((result == CHECK_TRANSFER_FAILED_1 || result == CHECK_TRANSFER_FAILED_2) <=> (
		comptrollerCheckSuccess &&
		accrued &&
		!checkTransferSuccess &&
		staticBalance
	)), "Mismatch in check transfer failure (12,13). Got result $result";

	// TODO: SG: I think Geoff said a revert was the intention!
	// Do transfer failure
	static_assert (!mintFreshReverted && result != MATH_ERROR) => (result == TOKEN_TRANSFER_IN_FAILED <=>
	(
		comptrollerCheckSuccess &&
		accrued &&
		checkTransferSuccess &&
		!doTransferSuccess &&
		staticBalance
	)), "Mismatch in do transfer failure (15). Got result $result";

	// Math error -> no state changes (at least, the ones we observe here! This is not checking about the FULL state of the contract)
	// SG: Idea - this could be a useful check that is reused across many of Compound's functions that may return math error codes, and will be more thorough.
	static_assert !mintFreshReverted => (result == MATH_ERROR =>
	(
		staticBalance
	)), "State changes occuring despite math error, totalSupplyPre=$totalSupplyPre, totalSupplyPost=$totalSupplyPost ; accountSupplyPre=$accountSupplyPre, accountSupplyPost=$accountSupplyPost";
}

mintFresh_extended(uint result, address account, uint256 amount)
description "Failed to mint fresh asset with result $result (account=$account, amount=$amount)" {
	// Free Variables
	env e0; havoc e0; // pre
	env e1; havoc e1; // invocation
	env e2; havoc e2; // post

	// Strict ordering
	static_require e1.block.number >= e0.block.number;
	static_require e2.block.number >= e1.block.number;

        // Minting to self is assumed to be impossible
        static_require account != currentContract;

	// Capture current values
	uint256 totalSupplyPre = sinvoke totalSupply(e0);
	uint256 accountSupplyPre = sinvoke balanceOf(e0, account);
	uint256 marketBlockNumber = sinvoke accrualBlockNumber(e0);

	uint256 cash = sinvoke getCash(e0);

	// Label CALL results
	uint comptrollerCheckResult = sinvoke comptrollerMintAllowed(e1, currentContract, account, amount);
	uint labelCheckTransferIn = sinvoke checkTransferInPub(e1, account, amount);
	uint labelDoTransferIn = sinvoke doTransferInPubSim(e1, account, amount);

	// Invoke mintFresh
	static_require result == invoke mintFreshPub(e1, account, amount);
	bool mintFreshReverted = lastReverted;

	// Get next values
	uint256 totalSupplyPost = sinvoke totalSupply(e2);
	uint256 accountSupplyPost = sinvoke balanceOf(e2, account);
	uint256 newCash = sinvoke getCash(e2);

	// Helper for checking balance has not changed
	bool staticBalance =
		( totalSupplyPost == totalSupplyPre &&
		  accountSupplyPost == accountSupplyPre )
		  && cash == newCash ;

	// Helper for checking balance has not changed, as expected.
	// Precise change is computed in cTokenComputationLemma
	bool dynamicBalance = (totalSupplyPost - totalSupplyPre == accountSupplyPost - accountSupplyPre) // Change in totalSupply is same as change in accountSupply
						&& (totalSupplyPost - totalSupplyPre >= 0) // The change in supplies must be >= 0
						&& (newCash - cash == amount); // The change in cash must be amount

	bool comptrollerCheckSuccess = comptrollerCheckResult == 0; // Comptroller is an external contract and its error is converted to COMPTROLLER_REJECTION, so no need to require on the label
	bool accrued = marketBlockNumber == e1.block.number;
	bool checkTransferSuccess = labelCheckTransferIn == 0;
	bool doTransferSuccess = labelDoTransferIn == 0;

	// Track error codes
	uint256 NO_ERROR = 0;
	uint256 COMPTROLLER_REJECTION = 3;
	uint256 NOT_ACCRUED = 10;
	uint256 CHECK_TRANSFER_FAILED_1 = 12;
	uint256 CHECK_TRANSFER_FAILED_2 = 13;
	uint256 TOKEN_TRANSFER_IN_FAILED = 15;
	uint256 MATH_ERROR = 9;

	// Guarantee return values
	static_assert (!mintFreshReverted && result != MATH_ERROR) => (
	  result == NO_ERROR ||
	  result == COMPTROLLER_REJECTION ||
	  result == NOT_ACCRUED ||
	  result == CHECK_TRANSFER_FAILED_1 ||
	  result == CHECK_TRANSFER_FAILED_2 ||
	  result == TOKEN_TRANSFER_IN_FAILED ||
	  result == MATH_ERROR
	), "Got unexpected error code $result";

	/* All these cases depend on: (1) mintFresh not reverting; and (2) the error code being anything  other than a math error.
		The idea is that (1) reverts, if are not catched by the caller (could it be a contract by Compound?), will have no effect on the state;
		and (2) math errors, which are handled separately.
	 */
	// Success case updates market accordingly
	static_assert (!mintFreshReverted && result != MATH_ERROR) => (result == NO_ERROR <=> (
		comptrollerCheckSuccess &&
		accrued &&
		checkTransferSuccess &&
		doTransferSuccess &&
		dynamicBalance
	)), "Mismatch in no error case (0). Got result $result";

	// Policy hook rejected case
	static_assert (!mintFreshReverted && result != MATH_ERROR) => (result == COMPTROLLER_REJECTION <=> (
		!comptrollerCheckSuccess &&
		staticBalance
	)), "Mismatch in comptroller rejection case (3). Got result $result";

	// Not accrued
	static_assert (!mintFreshReverted && result != MATH_ERROR) => (result == NOT_ACCRUED <=> (
		comptrollerCheckSuccess &&
		!accrued &&
		staticBalance
	)), "Mismatch in non-accrued case (10=0xa). Got result $result";

	// Check transfer failure
	static_assert (!mintFreshReverted && result != MATH_ERROR) => ((result == CHECK_TRANSFER_FAILED_1 || result == CHECK_TRANSFER_FAILED_2) <=> (
		comptrollerCheckSuccess &&
		accrued &&
		!checkTransferSuccess &&
		staticBalance
	)), "Mismatch in check transfer failure (12,13). Got result $result";

	// Do transfer failure
	static_assert (!mintFreshReverted && result != MATH_ERROR) => (result == TOKEN_TRANSFER_IN_FAILED <=>
	(
		comptrollerCheckSuccess &&
		accrued &&
		checkTransferSuccess &&
		!doTransferSuccess &&
		staticBalance
	)), "Mismatch in do transfer failure (15). Got result $result";

	// Math error -> no state changes (at least, the ones we observe here! This is not checking about the FULL state of the contract)
	// SG: Idea - this could be a useful check that is reused across many of Compound's functions that may return math error codes, and will be more thorough.
	static_assert !mintFreshReverted => (result == MATH_ERROR =>
	(
		staticBalance
	)), "State changes occuring despite math error, totalSupplyPre=$totalSupplyPre, totalSupplyPost=$totalSupplyPost ; accountSupplyPre=$accountSupplyPre, accountSupplyPost=$accountSupplyPost";
}


redeemFresh(uint result, address account, uint256 amountCTokens, uint256 amountUnderlying)
description "Failed to redeemFresh fresh asset with result $result (account=$account, amountCTokens=$amountCTokens, amountUnderlying=$amountUnderlying)" {
	// Free Variables
	env e0; havoc e0; // pre
	env e1; havoc e1; // invocation
	env e1b; havoc e1b; // invocations on behalf of CToken
	env e2; havoc e2; // post

	// Strict ordering
	static_require e1.block.number >= e0.block.number;
	static_require e2.block.number >= e1.block.number;

        // Redeeming from self is assumed to be impossible
        static_require account != currentContract;

	// Capture current values
	uint256 totalSupplyPre = sinvoke totalSupply(e0);
	uint256 accountSupplyPre = sinvoke balanceOf(e0, account);
	uint256 marketBlockNumber = sinvoke accrualBlockNumber(e0);
	uint256 cash = sinvoke getCash(e0);

	// Simulate checks that depend on external contracts
	uint comptrollerCheckResult = sinvoke comptrollerRedeemAllowed(e1, currentContract, account, amountCTokens); // Should include amountUnderlying?
	uint labelDoTransferOut = sinvoke doTransferOutPubSim(e1, account, amountUnderlying);

	// Invoke mintFresh
	static_require result == invoke redeemFreshPub(e1, account, amountCTokens, amountUnderlying);
	bool redeemFreshReverted = lastReverted;

	// Get next values
	uint256 totalSupplyPost = sinvoke totalSupply(e2);
	uint256 accountSupplyPost = sinvoke balanceOf(e2, account);
	uint256 newCash = sinvoke getCash(e2);

	// Helper for checking balance has not changed
	bool staticBalance =
		( totalSupplyPost == totalSupplyPre &&
		  accountSupplyPost == accountSupplyPre )
		  && cash == newCash ;

	// Helper for checking balance has not changed, as expected.
	// Precise change is computed in cTokenComputationLemma
	bool dynamicBalanceBasic = (totalSupplyPre - totalSupplyPost == accountSupplyPre - accountSupplyPost) // Change in totalSupply is same as change in accountSupply
						&& (totalSupplyPre - totalSupplyPost >= 0) // The change in supplies must be <= 0
						&& (cash - newCash >= 0); // This operation transfers out
	bool dynamicBalanceRedeemingUnderlying = (cash - newCash == amountUnderlying); // The change in cash must be amount
	bool dynamicBalanceRedeemingCToken = (totalSupplyPre-totalSupplyPost == amountCTokens); // The change in CToken must be -amountCTokens
	bool dynamicBalanceAdvanced = ((amountCTokens > 0 && amountUnderlying == 0) => dynamicBalanceRedeemingCToken)
								&& ((amountCTokens == 0 && amountUnderlying > 0) => dynamicBalanceRedeemingUnderlying)
								&& ((amountCTokens == 0 && amountUnderlying == 0) => (dynamicBalanceRedeemingCToken && dynamicBalanceRedeemingUnderlying))
								&& !(amountCTokens > 0 && amountUnderlying > 0);

	bool comptrollerCheckSuccess = comptrollerCheckResult == 0;
	bool accrued = marketBlockNumber == e1.block.number;
	bool checkTransferSuccess = cash >= amountUnderlying;
	bool doTransferSuccess = labelDoTransferOut == 0;

	// Track error codes
	uint256 NO_ERROR = 0;
	uint256 COMPTROLLER_REJECTION = 3;
	uint256 NOT_ACCRUED = 10;
	uint256 CHECK_TRANSFER_FAILED = 14; // TOKEN_INSUFFICIENT_CASH
	uint256 TOKEN_TRANSFER_OUT_FAILED = 16;
	uint256 MATH_ERROR = 9;

	// Guarantee return values
	static_assert (!redeemFreshReverted && result != MATH_ERROR) => (
	  result == NO_ERROR ||
	  result == COMPTROLLER_REJECTION ||
	  result == NOT_ACCRUED ||
	  result == CHECK_TRANSFER_FAILED ||
	  result == TOKEN_TRANSFER_OUT_FAILED ||
	  result == MATH_ERROR
	), "Got unexpected error code $result";


	// Success case updates market accordingly
	static_assert (!redeemFreshReverted && result != MATH_ERROR) => (result == NO_ERROR <=> (
		comptrollerCheckSuccess &&
		accrued &&
		checkTransferSuccess &&
		doTransferSuccess &&
		dynamicBalanceBasic &&
		dynamicBalanceAdvanced
	)), "Mismatch in no error case (0). Got result $result";

	// Policy hook rejected case
	static_assert (!redeemFreshReverted && result != MATH_ERROR) => (result == COMPTROLLER_REJECTION <=> (
		!comptrollerCheckSuccess &&
		staticBalance
	)), "Mismatch in comptroller rejection case (3=0x3). Got result $result";

	// Not accrued
	static_assert (!redeemFreshReverted && result != MATH_ERROR) => (result == NOT_ACCRUED <=> (
		comptrollerCheckSuccess &&
		!accrued &&
		staticBalance
	)), "Mismatch in non-accrued case (10=0xa). Got result $result";

	// Check transfer failure
	// Note that since if amountUnderlying == 0 we do not compute in the spec the computed amountUnderlying, so we skip the test for now
	static_assert (!redeemFreshReverted && result != MATH_ERROR && amountUnderlying > 0) => ((result == CHECK_TRANSFER_FAILED) <=> (
		comptrollerCheckSuccess &&
		accrued &&
		!checkTransferSuccess &&
		staticBalance
	)), "Mismatch in check transfer failure (14). Got result $result";

	// Do transfer failure
	// Should be: static_assert !doTransferSuccess => redeemFreshReverted;
	static_assert (!redeemFreshReverted && result != MATH_ERROR) => (result == TOKEN_TRANSFER_OUT_FAILED <=>
	(
		comptrollerCheckSuccess &&
		accrued &&
		checkTransferSuccess &&
		!doTransferSuccess &&
		staticBalance
	)), "Mismatch in do transfer failure (16). Got result $result";

	// Math error -> no state changes (at least, the ones we observe here! This is not checking about the FULL state of the contract)
	// SG: Idea - this could be a useful check that is reused across many of Compound's functions that may return math error codes, and will be more thorough.
	static_assert !redeemFreshReverted => (result == MATH_ERROR =>
	(
		staticBalance &&
		newCash == cash
	)), "State changes occuring despite math error, totalSupplyPre=$totalSupplyPre, totalSupplyPost=$totalSupplyPost ; accountSupplyPre=$accountSupplyPre, accountSupplyPost=$accountSupplyPost";
}

mintThenRedeem(address account, uint256 amountUnderlying)
description "Mint and redeem are not inverses for account $account, amount $amountUnderlying"
{
	env e0; havoc e0;

	uint origCash = sinvoke getCash(e0);

	// both calls are "fresh"
	uint resultMint = invoke mintFreshPub(e0, account, amountUnderlying);
	bool revertedMint = lastReverted;

	uint resultRedeem = invoke redeemFreshPub(e0, account, 0, amountUnderlying);
	bool revertedRedeem = lastReverted;

	uint newCash = sinvoke getCash(e0);

	static_assert (resultMint == 0 && !revertedMint && resultRedeem == 0 && !revertedRedeem) => newCash == origCash;

	// check that exchange rate is the same, check all the 4 variables that affect the exchange rate are retained.
	// check that accounts balances are the same.
	// the only thing that changes is the interest index. rounding errors.
}


/*
ERRORS:

0	NO_ERROR,
1	UNAUTHORIZED,
2	BAD_INPUT,
3	COMPTROLLER_REJECTION,
4	COMPTROLLER_CALCULATION_ERROR,
5	INTEREST_RATE_MODEL_ERROR,
6	INVALID_ACCOUNT_PAIR,
7	INVALID_CLOSE_AMOUNT_REQUESTED,
8	INVALID_COLLATERAL_FACTOR,
9	MATH_ERROR,
10	MARKET_NOT_FRESH,
11	MARKET_NOT_LISTED,
12	TOKEN_INSUFFICIENT_ALLOWANCE,
13	TOKEN_INSUFFICIENT_BALANCE,
14	TOKEN_INSUFFICIENT_CASH,
15	TOKEN_TRANSFER_IN_FAILED,
16	TOKEN_TRANSFER_OUT_FAILED

*/
